package example.ws.test;

import java.util.*;

import org.junit.*;
import static org.junit.Assert.*;
import mockit.*;

import javax.xml.ws.BindingProvider;
import javax.xml.ws.WebServiceException;

import example.ws.cli.CalcClient;
import calc.*; // classes generated by wsimport from WSDL


/**
 *  Test suite
 */
public class CalcClientTest {

    // static members


    // one-time initialization and clean-up

    @BeforeClass
    public static void oneTimeSetUp() {
    }

    @AfterClass
    public static void oneTimeTearDown() {
    }


    // members


    // initialization and clean-up for each test

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }


    // tests
    // assertEquals(expected, actual);

    /**
     *  In this test the server is mocked to
     *  simulate a communication exception.
     */
    @Test(expected=WebServiceException.class)
    public <P extends CalcPortType & BindingProvider> void testMockServerException(
        @Mocked final CalcService service,
        @Mocked final P port)
        throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {{
            new CalcService();
            service.getCalcPort(); result = port;
            port.sum(anyInt, anyInt);
            result = new WebServiceException("fabricated");
        }};


        // Unit under test is exercised.
        CalcClient client = new CalcClient();
        // call to mocked server
        client.sum(1,2);
    }

    /**
     *  In this test the server is mocked to
     *  simulate a communication exception on a second call.
     */
    @Test
    public <P extends CalcPortType & BindingProvider> void testMockServerExceptionOnSecondCall(
        @Mocked final CalcService service,
        @Mocked final P port)
        throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {{
            new CalcService();
            service.getCalcPort(); result = port;
            port.sum(1, 2);
            // first call to sum returns the result
            result = 3;
            // second call throws an exception
            result = new WebServiceException("fabricated");
        }};


        // Unit under test is exercised.
        CalcClient client = new CalcClient();

        // first call to mocked server
        try {
            client.sum(1,2);
        } catch(WebServiceException e) {
            // exception is not expected
            fail();
        }

        // second call to mocked server
        try {
            client.sum(1,2);
            fail();
        } catch(WebServiceException e) {
            // exception is expected
            assertEquals("fabricated", e.getMessage());
        }
    }

    /**
     *  In this test the server is mocked to
     *  test the divide by zero exception propagation.
     */
    @Test
    public <P extends CalcPortType & BindingProvider> void testMockServer(
        @Mocked final CalcService service,
        @Mocked final P port)
        throws Exception {

        // an "expectation block"
        // One or more invocations to mocked types, causing expectations to be recorded.
        new Expectations() {{
            new CalcService();
            service.getCalcPort(); result = port;
            port.intdiv(anyInt, anyInt);
            // first call to intdiv returns any number
            result = anyInt;
            // second call throws an exception
            result = new DivideByZero("fabricated", new DivideByZeroType());
        }};


        // Unit under test is exercised.
        CalcClient client = new CalcClient();

        // first call to mocked server
        client.intdiv(10,5);

        // second call to mocked server
        try {
            client.intdiv(10,5);
            fail();
        } catch(DivideByZero e) {
            // exception is expected
            assertEquals("fabricated", e.getMessage());
        }


        // a "verification block"
        // One or more invocations to mocked types, causing expectations to be verified.
        new Verifications() {{
            // Verifies that zero or one invocations occurred, with the specified argument value:
            port.intdiv(anyInt, anyInt); maxTimes = 2;
        }};
    }

}
