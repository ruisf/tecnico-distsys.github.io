package example.ws.cli;

import java.util.Map;
import javax.xml.ws.*;

import calc.*; // classes generated from WSDL


/**
 *  Calculator client.
 *
 *  Adds easier endpoint address configuration
 *  to the PortType generated by wsimport.
 *
 *  Could also be extended to add UDDI lookup capability.
 */
public class CalcClient implements CalcPortType {

    /** WS service */
    private CalcService service = null;

    /** WS port (interface) */
    private CalcPortType port = null;
    private BindingProvider bindingProvider = null;


    /** WS endpoint address */
    // default value is defined by WSDL
    private String wsURL = null;

    /** retrieve WS endpoint address */
    public String getEndpointAddress() {
        if (wsURL != null) {
            return wsURL;
        } else {
            Map<String, Object> requestContext = bindingProvider.getRequestContext();
            return (String) requestContext.get(BindingProvider.ENDPOINT_ADDRESS_PROPERTY);
        }
    }


    /** output option **/
    private boolean verbose = false;

    public boolean isVerbose() {
        return verbose;
    }
    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }


    /** constructor with provided web service URL */
    public CalcClient(String wsURL) throws CalcClientException {
        this.wsURL = wsURL;
        createStub();
    }

    /** default constructor uses default endpoint address */
    public CalcClient() throws CalcClientException {
        createStub();
    }


    /** Stub creation and configuration */
    protected void createStub() {
        if (verbose)
            System.out.println("Creating stub ...");
        service = new CalcService();
        port = service.getCalcPort();
        bindingProvider = (BindingProvider) port;

        if (wsURL != null) {
            if (verbose)
                System.out.println("Setting endpoint address ...");
            Map<String, Object> requestContext = bindingProvider.getRequestContext();
            requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, wsURL);
        }
    }


    // CalcPortType

    public int sum(int a, int b) {
        return port.sum(a,b);
    }

    public int sub(int a, int b) {
        return port.sub(a,b);
    }

    public int mult(int a, int b) {
        return port.mult(a,b);
    }

    public int intdiv(int a, int b) throws DivideByZero {
        return port.intdiv(a,b);
    }

}
